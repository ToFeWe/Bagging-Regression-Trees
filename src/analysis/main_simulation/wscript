#! python

def build(ctx):
    # Specify which settings you want to use. You can choose either 'general_settings'
    # or 'general_settings_small' with the later one being for testing.
    for model in ['friedman', 'linear', 'indicator']:
        # Start the simulation for Subagging.
        ctx(
            features='run_py_script',
            source='calc_simulation_subagging.py',
            deps=[
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'datasimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'baggingtree.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'montecarlosimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'general_settings.json'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'subagging_settings.json')
            ],
            target=[
                ctx.path_to(ctx, 'OUT_ANALYSIS_MAIN', 'output_subagging_{}.pickle'.format(model)),
            ],
            append=model,
        )

        # Start the simulation for the convergence of Bagging.
        ctx(
            features='run_py_script',
            source='calc_simulation_convergence.py',
            deps=[
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'datasimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'baggingtree.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'montecarlosimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'general_settings.json'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'convergence_settings.json')
            ],
            target=[
                ctx.path_to(ctx, 'OUT_ANALYSIS_MAIN', 'output_convergence_{}.pickle'.format(model)),
            ],
            append=model,
        )

        # Start the simulation for the tree depth.
        ctx(
            features='run_py_script',
            source='calc_simulation_tree_depth.py',
            deps=[
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'datasimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'baggingtree.py'),
                ctx.path_to(ctx, 'IN_MODEL_CODE', 'montecarlosimulation.py'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'general_settings.json'),
                ctx.path_to(ctx, 'IN_MODEL_SPECS', 'tree_depth_settings.json')
            ],
            target=[
                ctx.path_to(ctx, 'OUT_ANALYSIS_MAIN', 'output_tree_depth_{}.pickle'.format(model)),
            ],
            append=model,
        )
